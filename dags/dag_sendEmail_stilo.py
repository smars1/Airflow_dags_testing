import logging
import pandas as pd
from airflow import DAG
from airflow.utils.dates import days_ago
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.bash   import BashOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook


 # definimos nuetros operators airflow v <= 1.10.10
#from airflow.operators.dummy_operator import DummyOperator
#from airflow.operators.python_operator import PythonOperator
#from airflow.hooks.postgres_hook import PostgresHook

from airflow.exceptions import AirflowException
from datetime import timedelta


import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from airflow.utils.email import send_email_smtp

def send_failure_email(context):
    # Obtener informacion del contexto
    dag_id = context['dag'].dag_id
    task_id = context['task_instance'].task_id
    execution_date = context['execution_date']
    log_url = context['task_instance'].log_url

    # Obtener los logs del task_instance
    try:
        log = context['task_instance'].log
    except AttributeError:
        log = "No se pudieron obtener los logs."

    # Crear el mensaje HTML
    html_content = f"""
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div style="font-family: Arial, sans-serif; color: #333;">
        <h2 style="color: #FF4500;">Task Failure Notification</h2>
        <p style="color: #2F4F4F;"><strong>DAG:</strong> {dag_id}</p>
        <p style="color: #2F4F4F;"><strong>Task:</strong> {task_id}</p>
        <p style="color: #2F4F4F;"><strong>Execution Date:</strong> {execution_date}</p>
        <p>View the log: <a href="{log_url}" style="color: #FF4500;">Log URL</a></p>
        <hr style="border: 1px solid #2F4F4F;" />
        <footer style="font-size: 12px; color: #555;">
            <p>This email was generated by Airflow. Please do not reply.</p>
        </footer>
    </div>
</body>
</html>
"""

    # Configuración del correo
    subject = f"Fallo en DAG: {dag_id}, Task: {task_id}"
    to = "asaravia@entel.cl"
    
    send_email_smtp(
        to=to,
        subject=subject,
        html_content=html_content
    )

default_args = {
    'start_date': days_ago(1),
    'email_on_failure': True,
    'email': ["diego198mayo@gmail.com",'diego198mayotester@gmail.com','diego.pineda@factorit.com'],
    'retries': 1,
    'retry_delay': timedelta(minutes=0.1),
    'on_failure_callback': send_failure_email  # Nota: Añadir la funcion de callback al dag
}

def get_pandas():
    try:
        connection = PostgresHook('redshift_production')
        df = connection.get_pandas_df("SELECT * FROM TABLE")
        logging.info("Data obtained from the query")
        
        df.to_csv('s3://bucket/key.csv', index=False)
        logging.info('Saved in S3')
        
    except Exception as e:
        logging.error("Error connecting to the database or executing the query: %s", e)
        raise AirflowException("Failed to connect to the database or execute the query: ",e)
    

with DAG(dag_id='dag_send_Email_stilo',
         default_args=default_args,
         schedule_interval='@daily') as dag:
    
    start = EmptyOperator(task_id='start')

    get_pandas_operator = PythonOperator(
        task_id="get_pandas_operator",
        python_callable=get_pandas
    )
    
    end = EmptyOperator(task_id='end')
    
    start >> get_pandas_operator >> end